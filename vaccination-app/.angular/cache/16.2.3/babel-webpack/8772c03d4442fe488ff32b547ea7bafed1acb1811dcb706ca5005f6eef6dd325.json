{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons';\nimport { DatePipe } from '@angular/common';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\nexport let PlanningComponent = class PlanningComponent {\n  constructor(route, vaccinationService, userService, datePipe) {\n    this.route = route;\n    this.vaccinationService = vaccinationService;\n    this.userService = userService;\n    this.datePipe = datePipe;\n    this.selectedDate = new Date();\n    this.searchIcon = faMagnifyingGlass;\n    this.checkIcon = faCheck;\n  }\n  ngOnInit() {\n    const id = Number(this.route.snapshot.paramMap.get(\"id\"));\n    this.userService.getUserById(id).subscribe(resultUser => {\n      this.user = resultUser;\n      if (this.user.role == 'admin') {\n        this.vaccinationService.getAdminCenter(this.user.id).subscribe(resultCenter => {\n          this.center = resultCenter;\n        });\n      }\n      if (this.user.role == 'doctor') {\n        this.vaccinationService.getDoctorCenter(this.user.id).subscribe(resultCenter => {\n          this.center = resultCenter;\n        });\n      }\n    });\n  }\n  getPatients() {\n    if (this.center) {\n      this.vaccinationService.getBookingByCenter(this.center?.id, this.patient_lname).subscribe(resultPatients => {\n        this.patients = resultPatients;\n        const formattedDate = this.datePipe.transform(this.selectedDate, \"dd/MM/yyyy\");\n        this.patients = resultPatients.filter(patient => this.isBookingOnDate(patient, formattedDate));\n      });\n    }\n  }\n  isBookingOnDate(booking, selectedDate) {\n    return booking.registration_date === selectedDate;\n  }\n  updatePatient(aPatient) {\n    aPatient.vaccinated = true;\n    this.vaccinationService.updatePatient(aPatient.id, aPatient).subscribe();\n  }\n};\nPlanningComponent = __decorate([Component({\n  selector: 'app-planning',\n  templateUrl: './planning.component.html',\n  styleUrls: ['./planning.component.scss'],\n  providers: [DatePipe]\n})], PlanningComponent);","map":{"version":3,"names":["Component","faMagnifyingGlass","DatePipe","faCheck","PlanningComponent","constructor","route","vaccinationService","userService","datePipe","selectedDate","Date","searchIcon","checkIcon","ngOnInit","id","Number","snapshot","paramMap","get","getUserById","subscribe","resultUser","user","role","getAdminCenter","resultCenter","center","getDoctorCenter","getPatients","getBookingByCenter","patient_lname","resultPatients","patients","formattedDate","transform","filter","patient","isBookingOnDate","booking","registration_date","updatePatient","aPatient","vaccinated","__decorate","selector","templateUrl","styleUrls","providers"],"sources":["/Users/thibault_m/Desktop/Polytech/5A/Dev FullStack/VaccinationCovidApp/vaccination-app/src/app/planning/planning.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { VaccinationCenter } from '../vaccination-center-list/vaccination-center';\nimport { ActivatedRoute } from '@angular/router';\nimport { VaccinationService } from '../vaccination.service';\nimport { UserService } from '../user.service';\nimport { User } from '../authentification/user';\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons';\nimport { Booking } from '../vaccination-center/booking';\nimport { DatePipe } from '@angular/common';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-planning',\n  templateUrl: './planning.component.html',\n  styleUrls: ['./planning.component.scss'],\n  providers: [DatePipe]\n})\nexport class PlanningComponent implements OnInit{\n  \n  center?: VaccinationCenter;\n  user?: User;\n  patients?: Booking[];\n  patient_lname?: string;\n  selectedDate: Date = new Date();\n  searchIcon = faMagnifyingGlass;\n\n  checkIcon = faCheck;\n\n  constructor(private route: ActivatedRoute, private vaccinationService: VaccinationService, private userService: UserService, private datePipe: DatePipe){}\n\n  ngOnInit(): void{\n    const id = Number(this.route.snapshot.paramMap.get(\"id\"));\n    this.userService.getUserById(id).subscribe(resultUser=>{\n      this.user = resultUser;\n\n      if(this.user.role == 'admin'){\n        this.vaccinationService.getAdminCenter(this.user.id).subscribe(resultCenter=>{\n          this.center = resultCenter;\n        })\n      }\n  \n      if(this.user.role == 'doctor'){\n        this.vaccinationService.getDoctorCenter(this.user.id).subscribe(resultCenter=>{\n          this.center = resultCenter;\n        })\n      }\n    })\n\n  }\n\n  getPatients(){\n    if(this.center){\n      this.vaccinationService.getBookingByCenter(this.center?.id, this.patient_lname).subscribe(resultPatients=>{\n        this.patients = resultPatients;\n        const formattedDate = this.datePipe.transform(this.selectedDate, \"dd/MM/yyyy\")!;\n        this.patients = resultPatients.filter(patient => this.isBookingOnDate(patient, formattedDate));\n      })\n    }\n  }\n\n  isBookingOnDate(booking: Booking, selectedDate: string): boolean {\n    return booking.registration_date === selectedDate;\n  }\n\n  updatePatient(aPatient: Booking){\n    aPatient.vaccinated = true;\n    this.vaccinationService.updatePatient(aPatient.id, aPatient).subscribe();\n  }\n\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAMjD,SAASC,iBAAiB,QAAQ,mCAAmC;AAErE,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,OAAO,QAAQ,mCAAmC;AAQpD,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAW5BC,YAAoBC,KAAqB,EAAUC,kBAAsC,EAAUC,WAAwB,EAAUC,QAAkB;IAAnI,KAAAH,KAAK,GAALA,KAAK;IAA0B,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAA8B,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,QAAQ,GAARA,QAAQ;IAL7I,KAAAC,YAAY,GAAS,IAAIC,IAAI,EAAE;IAC/B,KAAAC,UAAU,GAAGX,iBAAiB;IAE9B,KAAAY,SAAS,GAAGV,OAAO;EAEsI;EAEzJW,QAAQA,CAAA;IACN,MAAMC,EAAE,GAAGC,MAAM,CAAC,IAAI,CAACV,KAAK,CAACW,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;IACzD,IAAI,CAACX,WAAW,CAACY,WAAW,CAACL,EAAE,CAAC,CAACM,SAAS,CAACC,UAAU,IAAE;MACrD,IAAI,CAACC,IAAI,GAAGD,UAAU;MAEtB,IAAG,IAAI,CAACC,IAAI,CAACC,IAAI,IAAI,OAAO,EAAC;QAC3B,IAAI,CAACjB,kBAAkB,CAACkB,cAAc,CAAC,IAAI,CAACF,IAAI,CAACR,EAAE,CAAC,CAACM,SAAS,CAACK,YAAY,IAAE;UAC3E,IAAI,CAACC,MAAM,GAAGD,YAAY;QAC5B,CAAC,CAAC;;MAGJ,IAAG,IAAI,CAACH,IAAI,CAACC,IAAI,IAAI,QAAQ,EAAC;QAC5B,IAAI,CAACjB,kBAAkB,CAACqB,eAAe,CAAC,IAAI,CAACL,IAAI,CAACR,EAAE,CAAC,CAACM,SAAS,CAACK,YAAY,IAAE;UAC5E,IAAI,CAACC,MAAM,GAAGD,YAAY;QAC5B,CAAC,CAAC;;IAEN,CAAC,CAAC;EAEJ;EAEAG,WAAWA,CAAA;IACT,IAAG,IAAI,CAACF,MAAM,EAAC;MACb,IAAI,CAACpB,kBAAkB,CAACuB,kBAAkB,CAAC,IAAI,CAACH,MAAM,EAAEZ,EAAE,EAAE,IAAI,CAACgB,aAAa,CAAC,CAACV,SAAS,CAACW,cAAc,IAAE;QACxG,IAAI,CAACC,QAAQ,GAAGD,cAAc;QAC9B,MAAME,aAAa,GAAG,IAAI,CAACzB,QAAQ,CAAC0B,SAAS,CAAC,IAAI,CAACzB,YAAY,EAAE,YAAY,CAAE;QAC/E,IAAI,CAACuB,QAAQ,GAAGD,cAAc,CAACI,MAAM,CAACC,OAAO,IAAI,IAAI,CAACC,eAAe,CAACD,OAAO,EAAEH,aAAa,CAAC,CAAC;MAChG,CAAC,CAAC;;EAEN;EAEAI,eAAeA,CAACC,OAAgB,EAAE7B,YAAoB;IACpD,OAAO6B,OAAO,CAACC,iBAAiB,KAAK9B,YAAY;EACnD;EAEA+B,aAAaA,CAACC,QAAiB;IAC7BA,QAAQ,CAACC,UAAU,GAAG,IAAI;IAC1B,IAAI,CAACpC,kBAAkB,CAACkC,aAAa,CAACC,QAAQ,CAAC3B,EAAE,EAAE2B,QAAQ,CAAC,CAACrB,SAAS,EAAE;EAC1E;CAGD;AArDYjB,iBAAiB,GAAAwC,UAAA,EAN7B5C,SAAS,CAAC;EACT6C,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B,CAAC;EACxCC,SAAS,EAAE,CAAC9C,QAAQ;CACrB,CAAC,C,EACWE,iBAAiB,CAqD7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}